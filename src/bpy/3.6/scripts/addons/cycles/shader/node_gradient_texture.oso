OpenShadingLanguage 1.00
# Compiled by oslc 1.13.0.1dev
# options: -q -O2 -I/root/blender-git/blender/intern/cycles/kernel/osl/shaders -I/root/blender-git/lib/linux_x86_64_glibc_228/osl/share/OSL/shaders -o /root/blender-git/build_linux_bpy/intern/cycles/kernel/osl/shaders/node_gradient_texture.oso
shader node_gradient_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1}
param	string	gradient_type	"linear"		%read{9,45} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{1,1} %write{0,0} %initexpr
oparam	float	Fac	0		%read{51,51} %write{50,50}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{51,51}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___374_x	%read{11,34} %write{5,5}
local	float	___374_y	%read{27,35} %write{6,6}
local	float	___374_z	%read{37,37} %write{7,7}
local	float	___374_result	%read{49,49} %write{8,47}
local	float	___376_r	%read{15,15} %write{14,14}
local	float	___377_r	%read{20,23} %write{19,19}
local	float	___377_t	%read{21,22} %write{20,20}
local	float	___380_r	%read{44,47} %write{41,41}
local	point	p	%read{3,7} %write{1,3}
const	string	$const1	"gradient"		%read{4,4} %write{2147483647,-1}
const	int	$const2	0		%read{5,5} %write{2147483647,-1}
const	int	$const3	1		%read{6,6} %write{2147483647,-1}
const	int	$const4	2		%read{7,7} %write{2147483647,-1}
const	float	$const5	0		%read{8,50} %write{2147483647,-1}
const	string	$const6	"linear"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp1	%read{10,10} %write{9,9}
const	string	$const7	"quadratic"		%read{12,12} %write{2147483647,-1}
temp	int	$tmp2	%read{13,13} %write{12,12}
const	string	$const8	"easing"		%read{16,16} %write{2147483647,-1}
temp	int	$tmp3	%read{17,17} %write{16,16}
temp	float	$tmp4	%read{19,19} %write{18,18}
const	float	$const9	1		%read{19,49} %write{2147483647,-1}
const	float	$const10	3		%read{21,21} %write{2147483647,-1}
temp	float	$tmp5	%read{24,24} %write{21,21}
const	float	$const11	2		%read{22,22} %write{2147483647,-1}
temp	float	$tmp6	%read{23,23} %write{22,22}
temp	float	$tmp7	%read{24,24} %write{23,23}
const	string	$const12	"diagonal"		%read{25,25} %write{2147483647,-1}
temp	int	$tmp8	%read{26,26} %write{25,25}
temp	float	$tmp9	%read{28,28} %write{27,27}
const	float	$const13	0.5		%read{28,33} %write{2147483647,-1}
const	string	$const14	"radial"		%read{29,29} %write{2147483647,-1}
temp	int	$tmp10	%read{30,30} %write{29,29}
temp	float	$tmp11	%read{32,32} %write{31,31}
const	float	$const15	6.2831855		%read{32,32} %write{2147483647,-1}
temp	float	$tmp12	%read{33,33} %write{32,32}
temp	float	$tmp13	%read{40,40} %write{39,39}
temp	float	$tmp14	%read{36,36} %write{34,34}
temp	float	$tmp15	%read{36,36} %write{35,35}
temp	float	$tmp16	%read{38,38} %write{36,36}
temp	float	$tmp17	%read{38,38} %write{37,37}
temp	float	$tmp18	%read{39,39} %write{38,38}
temp	float	$tmp19	%read{41,41} %write{40,40}
const	string	$const16	"quadratic_sphere"		%read{42,42} %write{2147483647,-1}
temp	int	$tmp20	%read{43,43} %write{42,42}
const	string	$const17	"spherical"		%read{45,45} %write{2147483647,-1}
temp	int	$tmp21	%read{46,46} %write{45,45}
const	string	$const18	"clamp"		%read{48,48} %write{2147483647,-1}
temp	float	$tmp22	%read{50,50} %write{49,49}
code Vector
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:53
#     point Vector = P,
	assign		Vector P 	%filename{"/root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl"} %line{53} %argrw{"wr"}
code ___main___
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:57
#   point p = Vector;
	assign		p Vector 	%filename{"/root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl"} %line{57} %argrw{"wr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:59
#   if (use_mapping)
	if		use_mapping 4 4 	%line{59} %argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:60
#     p = transform(mapping, p);
	transform	p mapping p 	%line{60} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:62
#   Fac = gradient(p, gradient_type);
	functioncall	$const1 51 	%line{62} %argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:12
#   x = p[0];
	compref		___374_x p $const2 	%line{12} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:13
#   y = p[1];
	compref		___374_y p $const3 	%line{13} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:14
#   z = p[2];
	compref		___374_z p $const4 	%line{14} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:16
#   float result = 0.0;
	assign		___374_result $const5 	%line{16} %argrw{"wr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:18
#   if (type == "linear") {
	eq		$tmp1 gradient_type $const6 	%line{18} %argrw{"wrr"}
	if		$tmp1 12 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:19
#     result = x;
	assign		___374_result ___374_x 	%line{19} %argrw{"wr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:21
#   else if (type == "quadratic") {
	eq		$tmp2 gradient_type $const7 	%line{21} %argrw{"wrr"}
	if		$tmp2 16 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:22
#     float r = max(x, 0.0);
	max		___376_r ___374_x $const5 	%line{22} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:23
#     result = r * r;
	mul		___374_result ___376_r ___376_r 	%line{23} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:25
#   else if (type == "easing") {
	eq		$tmp3 gradient_type $const8 	%line{25} %argrw{"wrr"}
	if		$tmp3 25 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:26
#     float r = min(max(x, 0.0), 1.0);
	max		$tmp4 ___374_x $const5 	%line{26} %argrw{"wrr"}
	min		___377_r $tmp4 $const9 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:27
#     float t = r * r;
	mul		___377_t ___377_r ___377_r 	%line{27} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:29
#     result = (3.0 * t - 2.0 * t * r);
	mul		$tmp5 $const10 ___377_t 	%line{29} %argrw{"wrr"}
	mul		$tmp6 $const11 ___377_t 	%argrw{"wrr"}
	mul		$tmp7 $tmp6 ___377_r 	%argrw{"wrr"}
	sub		___374_result $tmp5 $tmp7 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:31
#   else if (type == "diagonal") {
	eq		$tmp8 gradient_type $const12 	%line{31} %argrw{"wrr"}
	if		$tmp8 29 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:32
#     result = (x + y) * 0.5;
	add		$tmp9 ___374_x ___374_y 	%line{32} %argrw{"wrr"}
	mul		___374_result $tmp9 $const13 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:34
#   else if (type == "radial") {
	eq		$tmp10 gradient_type $const14 	%line{34} %argrw{"wrr"}
	if		$tmp10 34 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:35
#     result = atan2(y, x) / M_2PI + 0.5;
	atan2		$tmp11 ___374_y ___374_x 	%line{35} %argrw{"wrr"}
	div		$tmp12 $tmp11 $const15 	%argrw{"wrr"}
	add		___374_result $tmp12 $const13 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:38
#     float r = max(1.0 - sqrt(x * x + y * y + z * z), 0.0);
	mul		$tmp14 ___374_x ___374_x 	%line{38} %argrw{"wrr"}
	mul		$tmp15 ___374_y ___374_y 	%argrw{"wrr"}
	add		$tmp16 $tmp14 $tmp15 	%argrw{"wrr"}
	mul		$tmp17 ___374_z ___374_z 	%argrw{"wrr"}
	add		$tmp18 $tmp16 $tmp17 	%argrw{"wrr"}
	sqrt		$tmp13 $tmp18 	%argrw{"wr"}
	sub		$tmp19 $const9 $tmp13 	%argrw{"wrr"}
	max		___380_r $tmp19 $const5 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:40
#     if (type == "quadratic_sphere")
	eq		$tmp20 gradient_type $const16 	%line{40} %argrw{"wrr"}
	if		$tmp20 45 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:41
#       result = r * r;
	mul		___374_result ___380_r ___380_r 	%line{41} %argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:42
#     else if (type == "spherical")
	eq		$tmp21 gradient_type $const17 	%line{42} %argrw{"wrr"}
	if		$tmp21 48 48 	%argrw{"r"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:43
#       result = r;
	assign		___374_result ___380_r 	%line{43} %argrw{"wr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:46
#   return clamp(result, 0.0, 1.0);
	functioncall	$const18 51 	%line{46} %argrw{"r"}
# /root/blender-git/lib/linux_x86_64_glibc_228/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp22 ___374_result $const9 	%filename{"/root/blender-git/lib/linux_x86_64_glibc_228/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		Fac $tmp22 $const5 	%argrw{"wrr"}
# /root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl:63
#   Color = color(Fac, Fac, Fac);
	color		Color Fac Fac Fac 	%filename{"/root/blender-git/blender/intern/cycles/kernel/osl/shaders/node_gradient_texture.osl"} %line{63} %argrw{"wrrr"}
	end
